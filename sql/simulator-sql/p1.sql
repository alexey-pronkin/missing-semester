-- Задание:
-- Выведите все записи из таблицы products, отсортировав их по наименованиям товаров в алфавитном порядке, т.е. по возрастанию. Для сортировки используйте оператор ORDER BY.
-- Поля в результирующей таблице: name, price, product_id

SELECT name, price, product_id FROM products ORDER BY name

-- Задание:
-- Отсортируйте таблицу courier_actions сначала по колонке courier_id по возрастанию id курьера, потом по колонке action (снова по возрастанию), а затем по колонке time, но уже по убыванию — от самого последнего действия к самому первому.
-- Как вы уже догадались, сортировать таблицы можно в том числе по полям с датами и временем.
-- Поля в результирующей таблице: courier_id, order_id, action, time

SELECT courier_id, order_id, action, time FROM courier_actions ORDER BY courier_id ASC, action ASC, time DESC

-- Задание:
-- Выведите первые 50 строк из таблицы orders. Включите в результат только колонки с id и временем создания заказа.
-- Поля в результирующей таблице: order_id, creation_time

SELECT order_id, creation_time FROM orders LIMIT 50

-- Задание:
-- Определите 5 самых дорогих товаров в таблице products, которые доставляет наш сервис. Выведите их наименования и цену.
-- Поля в результирующей таблице: name, price

SELECT name, price FROM products ORDER BY price DESC LIMIT 5

-- Задание:
-- Определите 5 самых дорогих товаров в таблице products, которые доставляет наш сервис. Выведите их наименования и цену.
-- Поля в результирующей таблице: name, price
-- Повторите запрос из предыдущего задания, но теперь колонки name и price переименуйте соответственно в product_name и product_price.
-- Поля в результирующей таблице: product_name, product_price

SELECT name AS product_name, price AS product_price FROM products ORDER BY price DESC LIMIT 5

-- Задание:
-- Измените тип колонки price из таблицы products на VARCHAR. Выведите только эту колонку.
-- Поле в результирующей таблице: price

SELECT price::VARCHAR FROM products

-- Задание:
-- Выведите id всех курьеров и их годы рождения из таблицы couriers. Новую колонку с годом назовите birth_year.
-- Результат отсортируйте сначала по убыванию года рождения курьера, затем по возрастанию id курьера.
-- Поля в результирующей таблице: courier_id, birth_year

SELECT courier_id, DATE_PART('year', birth_date::TIMESTAMP) AS birth_year FROM couriers ORDER BY birth_year DESC, courier_id ASC

-- Задание:
-- Как и в предыдущем задании, снова выведите id всех курьеров и их годы рождения, только теперь к извлеченному году примените функцию COALESCE.
-- Укажите параметры функции так, чтобы вместо NULL значений в результат попадало текстовое значение 'unknown' (без кавычек). Названия полей оставьте прежними.
-- Отсортируйте итоговую таблицу сначала по убыванию года рождения курьера, затем по возрастанию id курьера.
-- Поля в результирующей таблице: courier_id, birth_year

-- Пояснение:
-- Не забудьте учесть, что 'unknown' — значение типа VARCHAR, а значит, извлекаемый год нужно тоже привести к этому типу. В SQL, как и во многих других языках, функции можно применять к результату других функций, т.е. последовательно:
-- SELECT function_one(function_two(a, b), c)
-- В приведённом выше примере a, b, c — аргументы функций. При этом одним из аргументов функции function_one является результат выполнения функции function_two.

SELECT courier_id, COALESCE(DATE_PART('year', birth_date::TIMESTAMP)::VARCHAR, 'unknown') AS birth_year FROM couriers ORDER BY birth_year DESC, courier_id ASC

-- Задание:
-- Для первых 200 записей из таблицы orders выведите информацию в следующем виде (обратите внимание на пробелы):
-- Заказ № [id_заказа] создан [дата]
-- Пример вывода:
-- Заказ № 65 создан 2022-09-01
-- Полученную колонку назовите order_info.
-- Пояснение:
-- Чтобы извлечь дату из значений в колонке creation_time, достаточно применить к ней функцию DATE или изменить её тип на DATE:

-- SELECT DATE(time)

-- SELECT CAST(time AS DATE)

-- SELECT time::DATE

SELECT
CONCAT ('Заказ № ', order_id, ' создан ', DATE(creation_time)) AS order_info
FROM orders LIMIT 200;

-- Задание:
-- Давайте представим, что по какой-то необъяснимой причине мы вдруг решили в одночасье повысить цену всех товаров в таблице products на 5%.
-- Выведите наименования всех товаров, их старую и новую цену. Колонку с новой ценой назовите new_price. Результат отсортируйте по убыванию значений в новой колонке.
-- Поля в результирующей таблице: name, price, new_price

SELECT name, price, price * 1.05 AS new_price FROM products ORDER BY new_price DESC

-- Задание:
-- Вновь, как и в прошлом задании, повысьте цену всех товаров на 5%, только теперь к колонке с новой ценой примените функцию ROUND.
-- Выведите id и наименование товаров, их старую цену, а также новую цену с округлением. Новую цену округлите до одного знака после запятой, но тип данных не меняйте. К
-- олонку с новой ценой снова назовите new_price. Результат отсортируйте сначала по убыванию новой цены, затем по возрастанию id товара.
-- Поля в результирующей таблице: product_id, name, price, new_price

SELECT product_id, name, price, ROUND(price * 1.05, 1) AS new_price FROM products ORDER BY new_price DESC, product_id ASC

-- Задание:
-- Повысьте цену на 5% только на те товары, цена которых превышает 100 рублей.
-- Цену остальных товаров оставьте без изменений.
-- Также не повышайте цену на икру, которая и так стоит 800 рублей.
-- Выведите id и наименования всех товаров, их старую и новую цену. Цену округлять не нужно.
-- Колонку с новой ценой снова назовите new_price. Результат отсортируйте сначала по убыванию новой цены, затем по возрастанию id товара.
-- Поля в результирующей таблице: product_id, name, price, new_price

SELECT product_id, name, price,
CASE
WHEN name = 'икра' THEN price
WHEN price > 100 THEN price * 1.05
ELSE price
END AS new_price
FROM products ORDER BY new_price DESC, product_id ASC

-- Давайте напоследок решим ещё одну практическую задачу. Представьте, что вы работаете аналитиком и к вам обратился менеджер из соседнего отдела с просьбой посчитать НДС каждого товара. 
-- Никаких дополнительных данных он вам не предоставил, поэтому вы решили выполнить задачу на своё усмотрение, посчитав, что НДС единый для всех товаров и составляет 20%.
-- Задание:
-- Вычислите НДС каждого товара в таблице products и рассчитайте цену без учёта НДС. Выведите всю информацию о товарах, включая сумму налога и цену без его учёта. 
-- Колонки с суммой налога и ценой без НДС назовите соответственно tax и price_before_tax. Округлите значения в этих колонках до двух знаков после запятой. 
-- Результат отсортируйте сначала по убыванию цены товара без учёта НДС, затем по возрастанию id товара.
-- Поля в результирующей таблице: product_id, name, price, tax, price_before_tax
-- Пояснение:
-- Так как НДС уже включён в текущую цену, налог считаем следующим образом: делим цену на 120 и умножаем на 20.

SELECT product_id, name, price, ROUND(price / 120 * 20, 2) AS tax, ROUND(price-ROUND(price / 120 * 20, 2), 2) AS price_before_tax 
FROM products ORDER BY price_before_tax DESC, product_id ASC