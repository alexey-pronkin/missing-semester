-- Задание:

-- Используя данные из таблицы user_actions, рассчитайте среднее число заказов всех пользователей нашего сервиса.
-- Для этого сначала в подзапросе посчитайте, сколько заказов сделал каждый пользователь,
-- а затем обратитесь к результату подзапроса в блоке FROM и уже в основном запросе усредните количество заказов по всем пользователям.
-- Полученное среднее число заказов всех пользователей округлите до двух знаков после запятой.
-- Колонку с этим значением назовите orders_avg.
-- Пояснение:
-- К колонкам из подзапроса можно применять агрегирующие функции — так же, как если бы мы обращались к колонкам исходных таблиц.

-- Поле в результирующей таблице: orders_avg

SELECT
  ROUND(AVG(number_orders), 2) as orders_avg
FROM
  (
    SELECT
      COUNT(DISTINCT order_id) as number_orders,
      user_id
    FROM
      user_actions
    GROUP BY
      user_id
  ) as c_orders

-- Задание:

-- Используя данные из таблицы user_actions, рассчитайте среднее число заказов всех пользователей нашего сервиса.
-- Для этого сначала в подзапросе посчитайте, сколько заказов сделал каждый пользователь,
-- а затем обратитесь к результату подзапроса в блоке FROM и уже в основном запросе усредните количество заказов по всем пользователям.
-- Полученное среднее число заказов всех пользователей округлите до двух знаков после запятой.
-- Колонку с этим значением назовите orders_avg.
-- Пояснение:
-- К колонкам из подзапроса можно применять агрегирующие функции — так же, как если бы мы обращались к колонкам исходных таблиц.
-- Вместо подзапроса используйте оператор WITH и табличное выражение.

-- Поле в результирующей таблице: orders_avg

WITH c_orders AS (SELECT
      COUNT(DISTINCT order_id) as number_orders,
      user_id
    FROM
      user_actions
    GROUP BY
      user_id)
SELECT
  ROUND(AVG(number_orders), 2) as orders_avg
FROM c_orders

-- Задание:
-- Выведите из таблицы products информацию о всех товарах кроме самого дешёвого.
-- Результат отсортируйте по убыванию id товара.
-- Поля в результирующей таблице: product_id, name, price

SELECT
  product_id,
  name,
  price
FROM
  products
WHERE
  price !=(
    SELECT
      MIN(price)
    FROM
      products
  )
  ORDER BY product_id DESC

-- Задание:

-- Выведите информацию о товарах в таблице products, цена на которые превышает среднюю цену всех товаров на 20 рублей и более. 
-- Результат отсортируйте по убыванию id товара.

-- Поля в результирующей таблице: product_id, name, price

SELECT
  product_id,
  name,
  price
FROM
  products
WHERE
  price > (
    SELECT
      AVG(price)
    FROM
      products
  ) + 20
  ORDER BY product_id DESC

-- Задание:

-- Посчитайте количество уникальных клиентов в таблице user_actions, сделавших за последнюю неделю хотя бы один заказ. 
-- Полученную колонку со значением назовите users_count. 
-- В качестве текущей даты, от которой откладывать неделю, используйте последнюю дату в той же таблице user_actions.

-- Поле в результирующей таблице: users_count

SELECT COUNT(DISTINCT user_id) as users_count
FROM user_actions
WHERE time > (SELECT MAX(time) FROM user_actions ) - INTERVAL '1 week'
