-- Задание:
-- Напишите SQL-запрос к таблице products и выведите всю информацию о товарах, цена которых не превышает 100 рублей. Результат отсортируйте по убыванию цены.
-- Поля в результирующей таблице: product_id, name, price

SELECT product_id, name, price FROM products WHERE price <= 100 ORDER BY price DESC

-- Задание:
-- В таблице products найдите все товары, содержащие в своём названии последовательность символов «чай» (без кавычек). Выведите две колонки: id продукта и его название.
-- Поля в результирующей таблице: product_id, name

SELECT product_id, name  FROM products WHERE name LIKE '%чай%';

-- Задание:
-- Выберите из таблицы products id и наименования только тех товаров, названия которых начинаются на букву «с» и содержат только одно слово.
-- Поля в результирующей таблице: product_id, name

SELECT product_id, name  FROM products WHERE name LIKE 'с%' AND name NOT LIKE '% %';

-- Задание:
-- Составьте SQL-запрос, который выбирает из таблицы products все чаи стоимостью больше 60 рублей и вычисляет для них цену со скидкой в 25%.
-- Скидку в % необходимо указать в отдельном столбце в формате текста, т.е. вот так: «25%» (без кавычек).
-- Столбцы со скидкой и новой ценой назовите соответственно discount и price_discounted.
-- Также необходимо любым известным способом избавиться от «чайного гриба»: вряд ли менеджер имел в виду и его, когда ставил нам задачу.
-- Пояснение:
-- Чтобы создать столбец с одним значением для всех записей (в нашем случае это столбец со скидкой), достаточно просто ввести нужное значение и как-то назвать новый столбец — указанное значение автоматически проставится во всех строках.

-- Поля в результирующей таблице: product_id,name, price, discount, price_discounted

SELECT product_id, name, price, '25%' AS discount, price*0.75 AS price_discounted  FROM products WHERE name LIKE '%чай%' AND price > 60 AND name NOT LIKE 'чайный гриб';

-- Задание: https://lab.karpov.courses/learning/152/module/1762/lesson/18485/53202/251024/ ошибка в задании
-- Из таблицы user_actions выведите всю информацию о действиях пользователей с id 170, 200 и 230 за период с 25 августа по 4 сентября 2022 года включительно.
-- Результат отсортируйте по времени совершения действия — от самых поздних действий к самым первым.

-- Поля в результирующей таблице: user_id, order_id, action, time

SELECT user_id, order_id, action, time FROM user_actions WHERE (user_id IN (170, 200, 230)) AND (time BETWEEN '2022-8-25' AND '2022-9-5') ORDER BY time DESC;

-- Задание:
-- Напишите SQL-запрос к таблице couriers и выведите всю информацию о курьерах, у которых не указан их день рождения. 
-- Результат отсортируйте по возрастанию id.

-- Поля в результирующей таблице: courier_id, birth_date, sex

SELECT courier_id, birth_date, sex FROM couriers WHERE birth_date IS NULL ORDER BY courier_id ASC;

-- Задание:
-- Определите id и дату рождения 50 самых молодых пользователей мужского пола из таблицы users.
-- Пояснение:
-- Будьте внимательны и помните про NULL значения.
-- Поле в результирующей таблице: user_id, birth_date

SELECT user_id, birth_date 
FROM users 
WHERE (sex = 'male') and (birth_date IS NOT NULL) 
ORDER BY birth_date DESC
LIMIT 50;

-- Задание:

-- Из таблицы user_actions получите id всех заказов, сделанных пользователями сервиса в августе 2022 года. 
-- Результат отсортируйте по возрастанию id заказа.
-- Пояснение:
-- Обратите внимание, что в исходной таблице есть записи не только со временем оформления, но и временем отмены заказа.
-- В этой задаче вам может пригодиться функция DATE_PART. Мы рассматривали её на прошлом уроке в этом задании.

-- Поле в результирующей таблице: order_id

SELECT order_id
FROM user_actions 
WHERE (DATE_PART('month', time) = 8) and (DATE_PART('year', time) = 2022) and (action = 'create_order')
ORDER BY order_id ASC;

-- Задание:
-- Из таблицы couriers отберите id всех курьеров, родившихся в период с 1990 по 1995 год включительно. Результат отсортируйте по возрастанию id курьера.
-- Пояснение:
-- В этой задаче вам может пригодиться функция DATE_PART. Мы рассматривали её на прошлом уроке в этом задании.

-- Поле в результирующей таблице: courier_id

SELECT courier_id
FROM couriers 
WHERE DATE_PART('year', birth_date) BETWEEN 1990 AND 1995
ORDER BY courier_id ASC

-- Задание:
-- Из таблицы user_actions получите информацию о всех отменах заказов, которые пользователи совершали в течение августа 2022 года по средам с 12:00 до 15:59. 
-- Результат отсортируйте по времени отмены заказа — от самых последних отмен к самым первым.
-- Пояснение:
-- Для решения задачи вам может пригодиться функция DATE_PART. 
-- Для получения дня недели можно указать аргумент 'dow' (day of week). 
-- В PostreSQL дни недели считаются с воскресенья (0) до субботы (6). Будьте аккуратны при работе со временем.

-- Поля в результирующей таблице: user_id, order_id, action, time

SELECT user_id, order_id, action, time FROM user_actions 
WHERE (action = 'cancel_order') AND (DATE_PART('month', time) = 8) AND (DATE_PART('year', time) = 2022) AND (DATE_PART('dow', time) = 3) AND (DATE_PART('hour', time) BETWEEN 12 AND 15)
ORDER BY time DESC

-- И напоследок давайте вернёмся к нашим налогам.
-- В прошлом уроке мы решили задачу для одного из менеджеров и посчитали НДС каждого товара. 
-- Вы долго смотрели на получившиеся расчёты и вас всё-таки замучила совесть: вы точно помните, что на отдельные группы товаров НДС составляет 10, а не 20%.
-- Поскольку менеджер перестал отвечать на ваши сообщения, вы решили написать напрямую бухгалтеру компании и запросили список товаров, на которые распространяется НДС 10%.
-- Вот какой список вы получили:

-- 'сахар', 'сухарики', 'сушки', 'семечки', 
-- 'масло льняное', 'виноград', 'масло оливковое', 
-- 'арбуз', 'батон', 'йогурт', 'сливки', 'гречка', 
-- 'овсянка', 'макароны', 'баранина', 'апельсины', 
-- 'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая', 
-- 'мука', 'шпроты', 'сосиски', 'свинина', 'рис', 
-- 'масло кунжутное', 'сгущенка', 'ананас', 'говядина', 
-- 'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки', 
-- 'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины'

-- Задание:
-- Как и в прошлый раз, вычислите НДС каждого товара в таблице products и рассчитайте цену без учёта НДС. 
-- Однако теперь примите во внимание, что для товаров из списка НДС составляет 10%. Для остальных товаров НДС тот же — 20%. 
-- Выведите всю информацию о товарах, включая сумму налога и цену без его учёта. Колонки с суммой налога и ценой без НДС назовите соответственно tax и price_before_tax. 
-- Округлите значения в этих колонках до двух знаков после запятой. Результат отсортируйте сначала по убыванию цены товара без учёта НДС, затем по возрастанию id товара.
-- Порядок расчёта налога тот же, что и в задании из прошлого урока.
-- Пояснение:
-- Для решения задачи вам могут пригодиться конструкция CASE и оператор IN. Конструкцию CASE мы рассматривали в этом задании.

-- Поля в результирующей таблице: product_id, name, price, tax, price_before_tax

SELECT product_id, name, price, 
CASE 
when name in ('сахар', 'сухарики', 'сушки', 'семечки',  
'масло льняное', 'виноград', 'масло оливковое', 
'арбуз', 'батон', 'йогурт', 'сливки', 'гречка', 
'овсянка', 'макароны', 'баранина', 'апельсины', 
'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая', 
'мука', 'шпроты', 'сосиски', 'свинина', 'рис', 
'масло кунжутное', 'сгущенка', 'ананас', 'говядина', 
'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки', 
'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины') then ROUND(price / 110 * 10, 2)
ELSE ROUND(price / 120 * 20, 2)
END AS tax,
CASE 
when name in ('сахар', 'сухарики', 'сушки', 'семечки',  
'масло льняное', 'виноград', 'масло оливковое', 
'арбуз', 'батон', 'йогурт', 'сливки', 'гречка', 
'овсянка', 'макароны', 'баранина', 'апельсины', 
'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая', 
'мука', 'шпроты', 'сосиски', 'свинина', 'рис', 
'масло кунжутное', 'сгущенка', 'ананас', 'говядина', 
'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки', 
'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины') then price - ROUND(price / 110 * 10, 2) 
ELSE price - ROUND(price / 120 * 20, 2) 
END AS price_before_tax
FROM products
ORDER BY price_before_tax DESC, product_id ASC;
